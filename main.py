import time
import threading
from datetime import datetime, timezone
import schedule
from modules import bybit_client, indicators, strategy_rules, chatgpt_assistant
import modules.db_connection as db
import bot

symbol = "BTCUSDT"
interval = 60 # –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ—á–∏ (kline / candlestick data).
limit = 300 # Limit for data size per page. [1, 1000]. Default: 200


def job_send_signal():
    print(f"üì§ –ó–∞–ø—É—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –≤ {datetime.now(timezone.utc).strftime('%d %b %Y %H:%M')} UTC")
    try:
        chat_ids = db.get_all_chat_ids()
        df = bybit_client.get_kline(symbol, interval, limit)
        df = indicators.add_indicators(df)
        signal = strategy_rules.generate_signals(df)
        # gpt_response = chatgpt_assistant.ask_gpt_about_market(df)

        for chat_id in chat_ids:
            try:
                bot.send_telegram_signal(chat_id, signal)
                # bot.send_telegram_ai_analyse(chat_id, gpt_response)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏–≥–Ω–∞–ª–∞ –≤ —á–∞—Ç {chat_id}: {e}")
        print("‚úÖ –°–∏–≥–Ω–∞–ª –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")



def start_scheduler():
    # schedule.every().hour.at(":00")
    schedule.every(10).seconds.do(job_send_signal)
    print("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω: —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥.")
    try:
        while True:
            schedule.run_pending()
            time.sleep(1)
    except KeyboardInterrupt:
        print("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")



if __name__ == "__main__":
    polling_thread = threading.Thread(target=bot.run_bot)
    scheduler_thread = threading.Thread(target=start_scheduler)
    polling_thread.start()
    scheduler_thread.start()
    polling_thread.join()
    scheduler_thread.join()


# print("–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:", signal)
# print("GPT –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:", gpt_response)